{
	"info": {
		"_postman_id": "fd789123-4567-8901-2345-678901234567",
		"name": "Food Delivery API - Complete Collection",
		"description": "Complete API collection for Food Delivery System with all services:\n- User Service (Authentication & Profile)\n- Restaurant Service (Listings & Menus)\n- Order Service (Order Management)\n- Delivery Service (Agent & Location Management)\n- System Health & Monitoring\n\n🚀 Live Production URL: https://food-delivery-9zla5h5hr-rishi-singhs-projects.vercel.app\n\n✅ All 15 endpoints included with automatic token management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "🏠 System Health & Info",
			"item": [
				{
					"name": "Get API Documentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains API info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('services');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Get API documentation and service information"
					},
					"response": []
				},
				{
					"name": "Simple Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Health status is OK', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('OK');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Simple health check endpoint"
					},
					"response": []
				},
				{
					"name": "Detailed System Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains detailed health info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('services');",
									"    pm.expect(jsonData).to.have.property('memory');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health"
							]
						},
						"description": "Detailed system health with service status and metrics"
					},
					"response": []
				}
			],
			"description": "System health monitoring and API documentation endpoints"
		},
		{
			"name": "👤 User Service",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User registration successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    ",
									"    // Store token for other requests",
									"    if (jsonData.token) {",
									"        pm.collectionVariables.set('authToken', jsonData.token);",
									"        pm.collectionVariables.set('userId', jsonData.user.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique email for testing",
									"const timestamp = Date.now();",
									"const testEmail = `testuser${timestamp}@example.com`;",
									"pm.collectionVariables.set('testEmail', testEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"password123\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Test Street, Test City\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Login successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('token');",
									"    ",
									"    // Store token for other requests",
									"    if (jsonData.token) {",
									"        pm.collectionVariables.set('authToken', jsonData.token);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials"
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile retrieved successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Get authenticated user's profile information"
					},
					"response": []
				}
			],
			"description": "User authentication and profile management endpoints"
		},
		{
			"name": "🏪 Restaurant Service",
			"item": [
				{
					"name": "Get All Restaurants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restaurants list retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('restaurants');",
									"    pm.expect(jsonData.restaurants).to.be.an('array');",
									"    ",
									"    // Store first restaurant ID for menu testing",
									"    if (jsonData.restaurants.length > 0) {",
									"        pm.collectionVariables.set('restaurantId', jsonData.restaurants[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants"
							]
						},
						"description": "Get list of all available restaurants"
					},
					"response": []
				},
				{
					"name": "Get Restaurant Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Menu retrieved successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('menu');",
									"    pm.expect(jsonData.menu).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}/menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}",
								"menu"
							]
						},
						"description": "Get menu for a specific restaurant"
					},
					"response": []
				},
				{
					"name": "Get Restaurant Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Restaurant details retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('restaurant');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/restaurants/{{restaurantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{restaurantId}}"
							]
						},
						"description": "Get detailed information about a specific restaurant"
					},
					"response": []
				}
			],
			"description": "Restaurant management and menu browsing endpoints"
		},
		{
			"name": "📦 Order Service",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Order created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('order');",
									"    pm.expect(jsonData.order).to.have.property('id');",
									"    ",
									"    // Store order ID for other order operations",
									"    if (jsonData.order && jsonData.order.id) {",
									"        pm.collectionVariables.set('orderId', jsonData.order.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"restaurantId\": \"{{restaurantId}}\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"name\": \"Margherita Pizza\",\n      \"quantity\": 2,\n      \"price\": 12.99\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Garlic Bread\",\n      \"quantity\": 1,\n      \"price\": 4.99\n    }\n  ],\n  \"deliveryAddress\": \"123 Test Street, Test City, 12345\",\n  \"totalAmount\": 30.97\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Create a new food order"
					},
					"response": []
				},
				{
					"name": "Get User Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Orders retrieved successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('orders');",
									"    pm.expect(jsonData.orders).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Get all orders for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Specific Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Order details retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('order');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}"
							]
						},
						"description": "Get details of a specific order"
					},
					"response": []
				},
				{
					"name": "Update Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Order status updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"confirmed\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}",
								"status"
							]
						},
						"description": "Update the status of an order (confirmed, preparing, ready, picked_up, delivered, cancelled)"
					},
					"response": []
				}
			],
			"description": "Order creation, tracking, and management endpoints"
		},
		{
			"name": "🚚 Delivery Service",
			"item": [
				{
					"name": "Register Delivery Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Agent registered successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('agent');",
									"    pm.expect(jsonData).to.have.property('token');",
									"    ",
									"    // Store agent token and ID",
									"    if (jsonData.token) {",
									"        pm.collectionVariables.set('agentToken', jsonData.token);",
									"    }",
									"    if (jsonData.agent && jsonData.agent.id) {",
									"        pm.collectionVariables.set('agentId', jsonData.agent.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Delivery Agent\",\n  \"vehicleType\": \"bike\",\n  \"licenseNumber\": \"DL123456789\",\n  \"phone\": \"+1987654321\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/agents/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"agents",
								"register"
							]
						},
						"description": "Register a new delivery agent"
					},
					"response": []
				},
				{
					"name": "Update Agent Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Location updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('location');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{agentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lat\": 40.7128,\n  \"lng\": -74.0060\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/agents/location",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"agents",
								"location"
							]
						},
						"description": "Update delivery agent's current location"
					},
					"response": []
				},
				{
					"name": "Get Available Orders for Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Available orders retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('orders');",
									"    pm.expect(jsonData.orders).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{agentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/agents/orders/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"agents",
								"orders",
								"available"
							]
						},
						"description": "Get list of orders available for delivery"
					},
					"response": []
				},
				{
					"name": "Accept Delivery Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Delivery accepted successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{agentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"estimatedDeliveryTime\": 30\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/deliveries/{{orderId}}/accept",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"deliveries",
								"{{orderId}}",
								"accept"
							]
						},
						"description": "Accept a delivery assignment for a specific order"
					},
					"response": []
				},
				{
					"name": "Get Agent Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Agent profile retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('agent');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{agentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/agents/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"agents",
								"profile"
							]
						},
						"description": "Get delivery agent's profile information"
					},
					"response": []
				},
				{
					"name": "Update Delivery Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Delivery status updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{agentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"picked_up\",\n  \"location\": {\n    \"lat\": 40.7589,\n    \"lng\": -73.9851\n  },\n  \"notes\": \"Order picked up from restaurant\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/deliveries/{{orderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"deliveries",
								"{{orderId}}",
								"status"
							]
						},
						"description": "Update delivery status (picked_up, out_for_delivery, delivered, failed)"
					},
					"response": []
				}
			],
			"description": "Delivery agent management and order assignment endpoints"
		},
		{
			"name": "📊 Analytics & Reporting",
			"item": [
				{
					"name": "Get Restaurant Analytics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Analytics data retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('analytics');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/analytics/restaurant/{{restaurantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"analytics",
								"restaurant",
								"{{restaurantId}}"
							]
						},
						"description": "Get analytics data for a specific restaurant"
					},
					"response": []
				},
				{
					"name": "Get Order Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Order statistics retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData).to.have.property('statistics');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/analytics/orders?period=7d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"analytics",
								"orders"
							],
							"query": [
								{
									"key": "period",
									"value": "7d"
								}
							]
						},
						"description": "Get order statistics for a specific time period"
					},
					"response": []
				}
			],
			"description": "Analytics and reporting endpoints for business metrics"
		},
		{
			"name": "🧪 Testing Workflows",
			"item": [
				{
					"name": "Complete User Journey Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This is a workflow test that combines multiple operations",
									"console.log('Starting complete user journey test...');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This request validates the complete user journey",
									"pm.test('Complete journey validation', function () {",
									"    const authToken = pm.collectionVariables.get('authToken');",
									"    const orderId = pm.collectionVariables.get('orderId');",
									"    const restaurantId = pm.collectionVariables.get('restaurantId');",
									"    ",
									"    pm.expect(authToken).to.not.be.undefined;",
									"    pm.expect(orderId).to.not.be.undefined;",
									"    pm.expect(restaurantId).to.not.be.undefined;",
									"    ",
									"    console.log('✅ User registered and authenticated');",
									"    console.log('✅ Restaurant data retrieved');",
									"    console.log('✅ Order created successfully');",
									"    console.log('✅ Complete user journey validated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Validates that all previous steps in the user journey completed successfully"
					},
					"response": []
				}
			],
			"description": "End-to-end testing workflows and validation"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script for all requests",
					"console.log('🚀 Making request to:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for all requests",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response format is JSON', function () {",
					"    pm.response.to.have.header('Content-Type');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://food-delivery-9zla5h5hr-rishi-singhs-projects.vercel.app",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "agentToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "agentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "restaurantId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "testEmail",
			"value": "",
			"type": "string"
		}
	]
}
